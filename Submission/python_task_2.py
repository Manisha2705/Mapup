# -*- coding: utf-8 -*-
"""Python_task_2.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iQnJgsZbrWhnMfdNOvRGTnr9ynIiblJR
"""

#Python_task_2 Solution-1

import pandas as pd

def calculate_distance_matrix(file_path):
    data = pd.read_csv(file_path)

    unique_ids = sorted(set(data['id_start'].unique()) | set(data['id_end'].unique()))
    num_ids = len(unique_ids)

    distance_matrix = pd.DataFrame(0, index=unique_ids, columns=unique_ids)

    for idx, row in data.iterrows():
        start_id = row['id_start']
        end_id = row['id_end']
        distance = row['distance']
        distance_matrix.loc[start_id, end_id] = distance
        distance_matrix.loc[end_id, start_id] = distance

    for via in unique_ids:
        for start in unique_ids:
            for end in unique_ids:
                if start != end and distance_matrix.loc[start, end] == 0:
                    if distance_matrix.loc[start, via] != 0 and distance_matrix.loc[via, end] != 0:
                        distance_matrix.loc[start, end] = distance_matrix.loc[start, via] + distance_matrix.loc[via, end]

    for idx in unique_ids:
        distance_matrix.loc[idx, idx] = 0

    return distance_matrix

file_path = 'dataset-3.csv'
resulting_distance_matrix = calculate_distance_matrix(file_path)
print(resulting_distance_matrix)

#Python_task_2 Solution-2
import pandas as pd

def unroll_distance_matrix(distance_matrix):
    ids = distance_matrix.index.tolist()

    id_start = []
    id_end = []
    distance = []

    for i in range(len(ids)):
        for j in range(len(ids)):
            if i != j:
                id_start.append(ids[i])
                id_end.append(ids[j])
                distance.append(distance_matrix.iloc[i, j])

    unrolled_df = pd.DataFrame({
        'id_start': id_start,
        'id_end': id_end,
        'distance': distance
    })

    return unrolled_df

resulting_distance_matrix = calculate_distance_matrix('dataset-3.csv')
unrolled_distances = unroll_distance_matrix(resulting_distance_matrix)
print(unrolled_distances)

#Python_task_2 Solution-3

import pandas as pd

def unroll_distance_matrix(distance_matrix):
    # Get the indexes (IDs) from the distance matrix
    ids = distance_matrix.index.tolist()

    # Initialize lists to store data
    id_start = []
    id_end = []
    distance = []

    # Iterate through the distance matrix to create the unrolled DataFrame
    for i in range(len(ids)):
        for j in range(len(ids)):
            if i != j:
                id_start.append(ids[i])
                id_end.append(ids[j])
                distance.append(distance_matrix.iloc[i, j])

    # Create a DataFrame with id_start, id_end, and distance
    unrolled_df = pd.DataFrame({
        'id_start': id_start,
        'id_end': id_end,
        'distance': distance
    })

    return unrolled_df

def find_ids_within_ten_percentage_threshold(df, reference_value):
    # Filter DataFrame based on the reference_value in 'id_start' column
    reference_df = df[df['id_start'] == reference_value]

    # Calculate the average distance for the reference value
    average_distance = reference_df['distance'].mean()

    # Calculate the threshold values (10% above and below the average)
    lower_threshold = average_distance - (average_distance * 0.1)
    upper_threshold = average_distance + (average_distance * 0.1)

    # Filter the DataFrame within the threshold range
    filtered_ids = df[(df['id_start'] != reference_value) &
                      (df['distance'] >= lower_threshold) &
                      (df['distance'] <= upper_threshold)]

    # Get unique values of id_start within the threshold range and sort them
    ids_within_threshold = sorted(filtered_ids['id_start'].unique())

    return ids_within_threshold

# Example usage with the DataFrame from unroll_distance_matrix function and a reference value of 5
resulting_distance_matrix = calculate_distance_matrix('dataset-3.csv')
unrolled_distances = unroll_distance_matrix(resulting_distance_matrix)
reference_value = 5
result_ids = find_ids_within_ten_percentage_threshold(unrolled_distances, reference_value)
print(result_ids)

#Python_task_2 Solution-4
import pandas as pd

# Assuming 'unrolled_distances' is the DataFrame obtained from Question 2

def calculate_toll_rate(df):
    # Add columns for different vehicle types and their respective rate coefficients
    df['moto'] = df['distance'] * 0.8
    df['car'] = df['distance'] * 1.2
    df['rv'] = df['distance'] * 1.5
    df['bus'] = df['distance'] * 2.2
    df['truck'] = df['distance'] * 3.6

    return df

# Example usage
resulting_distance_matrix = calculate_distance_matrix('dataset-3.csv')
unrolled_distances = unroll_distance_matrix(resulting_distance_matrix)

# Calculate toll rates
result_with_toll_rates = calculate_toll_rate(unrolled_distances)
print(result_with_toll_rates)

#Python_task_2 Solution-5

import pandas as pd
import datetime


def calculate_time_based_toll_rates(df):
    start_day_list, start_time_list, end_day_list, end_time_list, modified_distance_list = [], [], [], [], []

    for _, row in df.iterrows():
        if datetime.datetime.now().weekday() < 5:
            time_intervals = [
                (datetime.time(0, 0, 0), datetime.time(10, 0, 0), 0.8),
                (datetime.time(10, 0, 0), datetime.time(18, 0, 0), 1.2),
                (datetime.time(18, 0, 0), datetime.time(23, 59, 59), 0.8)
            ]
        else:
            time_intervals = [
                (datetime.time(0, 0, 0), datetime.time(23, 59, 59), 0.7)
            ]

        for start_time, end_time, discount_factor in time_intervals:
            start_day_list.append(row['id_start'])
            start_time_list.append(start_time)
            end_day_list.append(row['id_end'])
            end_time_list.append(end_time)

            modified_distance_list.append(row['distance'] * discount_factor)

    new_df = pd.DataFrame({
        'id_start': start_day_list,
        'start_day': [datetime.date.today().strftime('%A')]*len(start_day_list),
        'start_time': start_time_list,
        'id_end': end_day_list,
        'end_day': [datetime.date.today().strftime('%A')]*len(end_day_list),
        'end_time': end_time_list,
        'modified_distance': modified_distance_list
    })

    return new_df

resulting_distance_matrix = calculate_distance_matrix('dataset-3.csv')
unrolled_distances = unroll_distance_matrix(resulting_distance_matrix)
result_with_toll_rates = calculate_toll_rate(unrolled_distances)

result_with_time_based_toll_rates = calculate_time_based_toll_rates(result_with_toll_rates)
print(result_with_time_based_toll_rates)